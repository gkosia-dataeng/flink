SQL Joins:

  https://www.ververica.com/blog/flink-sql-joins-part-1
  
  Regular Joins: retain every input row as part of the join to potentially join it with the other table in the future
  
  Interval Joins: join considering a specific interval to reduce the records needed in state
  	
  	each set is divided into intervals (start and end time)
  	
  	join the input based on an interval of the other set
  	
  	FROM orders o
  	JOIN shipments s ON o.id = s.order_id
  	WHERE
  	  o.order_time BETWEEN s.shipment_time - INTERVAL '3' DAY AND s.shipment_time;
  	  
  	  
  Lookup Joins: join with  a static set 
  	
  			  The join requires one table to have a processing time attribute and the other table to be backed by a lookup source connector, like the JDBC connector.
  			  The lookup join also requires an equality join predicate based on the PRIMARY KEY of the lookup table (usub.user_id = u.user_id)
  			  
  			  
  			  
  			  FROM subscriptions usub
  			  JOIN users FOR SYSTEM_TIME AS OF usub.proc_time AS u
  			    ON usub.user_id = u.user_id;
				
				
				
  Temporal Joins: https://nightlies.apache.org/flink/flink-docs-release-1.20/docs/dev/table/sql/queries/joins/#temporal-joins
	
	Temporal table (dynamic table): table that evolves over time, rows are associated with one or more temporal periods
	
	
	Event Time Temporal Join:
		
		Relate the rows of left table with the rows of right temporal table (version of table at a specific time)
	
		
		FROM orders
		LEFT JOIN currency_rates FOR SYSTEM_TIME AS OF orders.order_time
		ON orders.currency = currency_rates.currency;
		
		Flink will store the value of currency in each watermark and will link the order time with the specific watermark
		Both sides of the join should have set watermark 
		Right table should have Primary key
		Temporal join requires the primary key contained in the equivalence condition of the temporal join condition
		
		
	Processing time temporal Join:
		
		Using the processing time to correlate row from left table with latest version until the processing time of a key in an external versioned table
